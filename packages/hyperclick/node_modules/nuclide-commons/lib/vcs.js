
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var findVcsHelper = _asyncToGenerator(function* (src) {
  var options = {
    'cwd': path.dirname(src)
  };
  try {
    var hgResult = yield asyncExecute('hg', ['root'], options);
  } catch (e) {
    hgResult = e;
  }

  if (hgResult.exitCode === 0) {
    return {
      vcs: 'hg',
      root: hgResult.stdout.trim()
    };
  }

  var gitResult;
  try {
    gitResult = yield asyncExecute('git', ['rev-parse', '--show-toplevel'], options);
  } catch (e) {
    gitResult = e;
  }

  if (gitResult.exitCode === 0) {
    return {
      vcs: 'git',
      root: gitResult.stdout.trim()
    };
  }

  throw new Error('Could not find VCS for: ' + src);
}

/**
 * For the given source file, find the type of vcs that is managing it as well
 * as the root directory for the VCS.
 */
);

var findVcs = _asyncToGenerator(function* (src) {
  var vcsInfo = vcsInfoCache[src];
  if (vcsInfo) {
    return vcsInfo;
  }

  vcsInfo = yield findVcsHelper(src);
  vcsInfoCache[src] = vcsInfo;
  return vcsInfo;
});

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _require = require('./process');

var asyncExecute = _require.asyncExecute;

var path = require('path');

var vcsInfoCache = {};

module.exports = {
  findVcs: findVcs
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy93MS9fMm1jNm0wNTBxbjIzMm5wc2Y5ejNoZnNoNThfamgvVC90bXBpMzV6akdwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWNvbW1vbnMvbGliL3Zjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7Ozs7Ozs7Ozs7SUFvQkcsYUFBYSxxQkFBNUIsV0FBNkIsR0FBVyxFQUFvQjtBQUMxRCxNQUFJLE9BQU8sR0FBRztBQUNaLFNBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztHQUN6QixDQUFDO0FBQ0YsTUFBSTtBQUNGLFFBQUksUUFBUSxHQUFHLE1BQU0sWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0dBQzVELENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDVixZQUFRLEdBQUcsQ0FBQyxDQUFDO0dBQ2Q7O0FBRUQsTUFBSSxRQUFRLENBQUMsUUFBUSxLQUFLLENBQUMsRUFBRTtBQUMzQixXQUFPO0FBQ0wsU0FBRyxFQUFFLElBQUk7QUFDVCxVQUFJLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUU7S0FDN0IsQ0FBQztHQUNIOztBQUVELE1BQUksU0FBUyxDQUFDO0FBQ2QsTUFBSTtBQUNGLGFBQVMsR0FBRyxNQUFNLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxXQUFXLEVBQUUsaUJBQWlCLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztHQUNsRixDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQ1YsYUFBUyxHQUFHLENBQUMsQ0FBQztHQUNmOztBQUVELE1BQUksU0FBUyxDQUFDLFFBQVEsS0FBSyxDQUFDLEVBQUU7QUFDNUIsV0FBTztBQUNMLFNBQUcsRUFBRSxLQUFLO0FBQ1YsVUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO0tBQzlCLENBQUM7R0FDSDs7QUFFRCxRQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixHQUFHLEdBQUcsQ0FBQyxDQUFDO0NBQ25EOzs7Ozs7OztJQU1jLE9BQU8scUJBQXRCLFdBQXVCLEdBQVcsRUFBb0I7QUFDcEQsTUFBSSxPQUFPLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hDLE1BQUksT0FBTyxFQUFFO0FBQ1gsV0FBTyxPQUFPLENBQUM7R0FDaEI7O0FBRUQsU0FBTyxHQUFHLE1BQU0sYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ25DLGNBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUM7QUFDNUIsU0FBTyxPQUFPLENBQUM7Q0FDaEI7Ozs7ZUF6RG9CLE9BQU8sQ0FBQyxXQUFXLENBQUM7O0lBQXBDLFlBQVksWUFBWixZQUFZOztBQUNqQixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7O0FBTzNCLElBQUksWUFBc0MsR0FBRyxFQUFFLENBQUM7O0FBbURoRCxNQUFNLENBQUMsT0FBTyxHQUFHO0FBQ2YsU0FBTyxFQUFQLE9BQU87Q0FDUixDQUFDIiwiZmlsZSI6Ii92YXIvZm9sZGVycy93MS9fMm1jNm0wNTBxbjIzMm5wc2Y5ejNoZnNoNThfamgvVC90bXBpMzV6akdwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWNvbW1vbnMvbGliL3Zjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG52YXIge2FzeW5jRXhlY3V0ZX0gPSByZXF1aXJlKCcuL3Byb2Nlc3MnKTtcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG50eXBlIFZjc0luZm8gPSB7XG4gIHZjczogc3RyaW5nO1xuICByb290OiBzdHJpbmc7XG59XG5cbnZhciB2Y3NJbmZvQ2FjaGU6IHtbc3JjOiBzdHJpbmddOiBWY3NJbmZvfSA9IHt9O1xuXG5hc3luYyBmdW5jdGlvbiBmaW5kVmNzSGVscGVyKHNyYzogc3RyaW5nKTogUHJvbWlzZTxWY3NJbmZvPiB7XG4gIHZhciBvcHRpb25zID0ge1xuICAgICdjd2QnOiBwYXRoLmRpcm5hbWUoc3JjKSxcbiAgfTtcbiAgdHJ5IHtcbiAgICB2YXIgaGdSZXN1bHQgPSBhd2FpdCBhc3luY0V4ZWN1dGUoJ2hnJywgWydyb290J10sIG9wdGlvbnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaGdSZXN1bHQgPSBlO1xuICB9XG5cbiAgaWYgKGhnUmVzdWx0LmV4aXRDb2RlID09PSAwKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZjczogJ2hnJyxcbiAgICAgIHJvb3Q6IGhnUmVzdWx0LnN0ZG91dC50cmltKCksXG4gICAgfTtcbiAgfVxuXG4gIHZhciBnaXRSZXN1bHQ7XG4gIHRyeSB7XG4gICAgZ2l0UmVzdWx0ID0gYXdhaXQgYXN5bmNFeGVjdXRlKCdnaXQnLCBbJ3Jldi1wYXJzZScsICctLXNob3ctdG9wbGV2ZWwnXSwgb3B0aW9ucyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBnaXRSZXN1bHQgPSBlO1xuICB9XG5cbiAgaWYgKGdpdFJlc3VsdC5leGl0Q29kZSA9PT0gMCkge1xuICAgIHJldHVybiB7XG4gICAgICB2Y3M6ICdnaXQnLFxuICAgICAgcm9vdDogZ2l0UmVzdWx0LnN0ZG91dC50cmltKCksXG4gICAgfTtcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgVkNTIGZvcjogJyArIHNyYyk7XG59XG5cbi8qKlxuICogRm9yIHRoZSBnaXZlbiBzb3VyY2UgZmlsZSwgZmluZCB0aGUgdHlwZSBvZiB2Y3MgdGhhdCBpcyBtYW5hZ2luZyBpdCBhcyB3ZWxsXG4gKiBhcyB0aGUgcm9vdCBkaXJlY3RvcnkgZm9yIHRoZSBWQ1MuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGZpbmRWY3Moc3JjOiBzdHJpbmcpOiBQcm9taXNlPFZjc0luZm8+IHtcbiAgdmFyIHZjc0luZm8gPSB2Y3NJbmZvQ2FjaGVbc3JjXTtcbiAgaWYgKHZjc0luZm8pIHtcbiAgICByZXR1cm4gdmNzSW5mbztcbiAgfVxuXG4gIHZjc0luZm8gPSBhd2FpdCBmaW5kVmNzSGVscGVyKHNyYyk7XG4gIHZjc0luZm9DYWNoZVtzcmNdID0gdmNzSW5mbztcbiAgcmV0dXJuIHZjc0luZm87XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBmaW5kVmNzLFxufTtcbiJdfQ==
