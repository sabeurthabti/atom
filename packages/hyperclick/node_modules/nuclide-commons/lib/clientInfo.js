Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.isRunningInClient = isRunningInClient;
exports.getAtomVersion = getAtomVersion;
exports.isRunningInNuclide = isRunningInNuclide;
exports.getNuclideBuildNumber = getNuclideBuildNumber;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

'use babel';

var SMALLEST_NUCLIDE_BUILD_NUMBER = 5394875;

function isRunningInClient() {
  return global.atom !== undefined;
}

function getAtomVersion() {
  if (!isRunningInClient()) {
    throw Error('Not running in Atom/Nuclide.');
  }
  return global.atom.getVersion();
}

/**
 * Determine whether the package is running in Atom.app or Nuclide.app.
 *
 * While building Nuclide release, we set the internal build number as part of version number.
 * So the version looks like 1.0.$buildNumber. Since the internal build number is really big,
 * whereas the counterpart in Atom' version string is realtively small or not a valid number,
 * it is a good way to identify if the running editer is Nuclide or Atom.
 */

function isRunningInNuclide() {
  if (!isRunningInClient()) {
    return false;
  }

  var version = getAtomVersion();
  var buildNumber = version.split('.')[2];
  // If the PATCH version (the third part of version string splitted by dot) is a number and larger
  // than SMALLEST_NUCLIDE_BUILD_NUMBER, then it's a build number.
  if (/^\d+$/.test(buildNumber) && parseInt(buildNumber, 10) >= SMALLEST_NUCLIDE_BUILD_NUMBER) {
    return true;
  }
  return false;
}

var atomConfig = isRunningInClient() ? require(_path2['default'].join(atom.getLoadSettings().resourcePath, 'package.json')) : {};

function getNuclideBuildNumber() {
  if (!isRunningInClient()) {
    throw Error('Not running in Atom/Nuclide.');
  }
  return atomConfig.buildNumber || 0;
}

// TODO(chenshen) implement isDevelopment.
// TODO(chenshen) implement getInstallerPackageBuildNumber.

var __test__ = {
  SMALLEST_NUCLIDE_BUILD_NUMBER: SMALLEST_NUCLIDE_BUILD_NUMBER
};
exports.__test__ = __test__;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy93MS9fMm1jNm0wNTBxbjIzMm5wc2Y5ejNoZnNoNThfamgvVC90bXBpMzV6akdwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWNvbW1vbnMvbGliL2NsaWVudEluZm8uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQVVpQixNQUFNOzs7O0FBVnZCLFdBQVcsQ0FBQzs7QUFZWixJQUFJLDZCQUE2QixHQUFHLE9BQU8sQ0FBQzs7QUFFckMsU0FBUyxpQkFBaUIsR0FBWTtBQUMzQyxTQUFPLE1BQU0sQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDO0NBQ2xDOztBQUVNLFNBQVMsY0FBYyxHQUFXO0FBQ3ZDLE1BQUksQ0FBQyxpQkFBaUIsRUFBRSxFQUFFO0FBQ3hCLFVBQU0sS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUM7R0FDN0M7QUFDRCxTQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7Q0FDakM7Ozs7Ozs7Ozs7O0FBVU0sU0FBUyxrQkFBa0IsR0FBWTtBQUM1QyxNQUFJLENBQUMsaUJBQWlCLEVBQUUsRUFBRTtBQUN4QixXQUFPLEtBQUssQ0FBQztHQUNkOztBQUVELE1BQUksT0FBTyxHQUFHLGNBQWMsRUFBRSxDQUFDO0FBQy9CLE1BQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7OztBQUd4QyxNQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksUUFBUSxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsSUFBSSw2QkFBNkIsRUFBRTtBQUMzRixXQUFPLElBQUksQ0FBQztHQUNiO0FBQ0QsU0FBTyxLQUFLLENBQUM7Q0FDZDs7QUFFRCxJQUFJLFVBQVUsR0FBRyxpQkFBaUIsRUFBRSxHQUNoQyxPQUFPLENBQUMsa0JBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxZQUFZLEVBQUUsY0FBYyxDQUFDLENBQUMsR0FDdkUsRUFBRSxDQUFDOztBQUVBLFNBQVMscUJBQXFCLEdBQVc7QUFDOUMsTUFBSSxDQUFDLGlCQUFpQixFQUFFLEVBQUU7QUFDeEIsVUFBTSxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQztHQUM3QztBQUNELFNBQU8sVUFBVSxDQUFDLFdBQVcsSUFBSSxDQUFDLENBQUM7Q0FDcEM7Ozs7O0FBS00sSUFBSSxRQUFRLEdBQUc7QUFDcEIsK0JBQTZCLEVBQTdCLDZCQUE2QjtDQUM5QixDQUFDIiwiZmlsZSI6Ii92YXIvZm9sZGVycy93MS9fMm1jNm0wNTBxbjIzMm5wc2Y5ejNoZnNoNThfamgvVC90bXBpMzV6akdwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWNvbW1vbnMvbGliL2NsaWVudEluZm8uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbnZhciBTTUFMTEVTVF9OVUNMSURFX0JVSUxEX05VTUJFUiA9IDUzOTQ4NzU7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1J1bm5pbmdJbkNsaWVudCgpOiBib29sZWFuIHtcbiAgcmV0dXJuIGdsb2JhbC5hdG9tICE9PSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBdG9tVmVyc2lvbigpOiBzdHJpbmcge1xuICBpZiAoIWlzUnVubmluZ0luQ2xpZW50KCkpIHtcbiAgICB0aHJvdyBFcnJvcignTm90IHJ1bm5pbmcgaW4gQXRvbS9OdWNsaWRlLicpO1xuICB9XG4gIHJldHVybiBnbG9iYWwuYXRvbS5nZXRWZXJzaW9uKCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIHBhY2thZ2UgaXMgcnVubmluZyBpbiBBdG9tLmFwcCBvciBOdWNsaWRlLmFwcC5cbiAqXG4gKiBXaGlsZSBidWlsZGluZyBOdWNsaWRlIHJlbGVhc2UsIHdlIHNldCB0aGUgaW50ZXJuYWwgYnVpbGQgbnVtYmVyIGFzIHBhcnQgb2YgdmVyc2lvbiBudW1iZXIuXG4gKiBTbyB0aGUgdmVyc2lvbiBsb29rcyBsaWtlIDEuMC4kYnVpbGROdW1iZXIuIFNpbmNlIHRoZSBpbnRlcm5hbCBidWlsZCBudW1iZXIgaXMgcmVhbGx5IGJpZyxcbiAqIHdoZXJlYXMgdGhlIGNvdW50ZXJwYXJ0IGluIEF0b20nIHZlcnNpb24gc3RyaW5nIGlzIHJlYWx0aXZlbHkgc21hbGwgb3Igbm90IGEgdmFsaWQgbnVtYmVyLFxuICogaXQgaXMgYSBnb29kIHdheSB0byBpZGVudGlmeSBpZiB0aGUgcnVubmluZyBlZGl0ZXIgaXMgTnVjbGlkZSBvciBBdG9tLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNSdW5uaW5nSW5OdWNsaWRlKCk6IGJvb2xlYW4ge1xuICBpZiAoIWlzUnVubmluZ0luQ2xpZW50KCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgdmVyc2lvbiA9IGdldEF0b21WZXJzaW9uKCk7XG4gIHZhciBidWlsZE51bWJlciA9IHZlcnNpb24uc3BsaXQoJy4nKVsyXTtcbiAgLy8gSWYgdGhlIFBBVENIIHZlcnNpb24gKHRoZSB0aGlyZCBwYXJ0IG9mIHZlcnNpb24gc3RyaW5nIHNwbGl0dGVkIGJ5IGRvdCkgaXMgYSBudW1iZXIgYW5kIGxhcmdlclxuICAvLyB0aGFuIFNNQUxMRVNUX05VQ0xJREVfQlVJTERfTlVNQkVSLCB0aGVuIGl0J3MgYSBidWlsZCBudW1iZXIuXG4gIGlmICgvXlxcZCskLy50ZXN0KGJ1aWxkTnVtYmVyKSAmJiBwYXJzZUludChidWlsZE51bWJlciwgMTApID49IFNNQUxMRVNUX05VQ0xJREVfQlVJTERfTlVNQkVSKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG52YXIgYXRvbUNvbmZpZyA9IGlzUnVubmluZ0luQ2xpZW50KCkgP1xuICAgIHJlcXVpcmUocGF0aC5qb2luKGF0b20uZ2V0TG9hZFNldHRpbmdzKCkucmVzb3VyY2VQYXRoLCAncGFja2FnZS5qc29uJykpIDpcbiAgICB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldE51Y2xpZGVCdWlsZE51bWJlcigpOiBudW1iZXIge1xuICBpZiAoIWlzUnVubmluZ0luQ2xpZW50KCkpIHtcbiAgICB0aHJvdyBFcnJvcignTm90IHJ1bm5pbmcgaW4gQXRvbS9OdWNsaWRlLicpO1xuICB9XG4gIHJldHVybiBhdG9tQ29uZmlnLmJ1aWxkTnVtYmVyIHx8IDA7XG59XG5cbi8vIFRPRE8oY2hlbnNoZW4pIGltcGxlbWVudCBpc0RldmVsb3BtZW50LlxuLy8gVE9ETyhjaGVuc2hlbikgaW1wbGVtZW50IGdldEluc3RhbGxlclBhY2thZ2VCdWlsZE51bWJlci5cblxuZXhwb3J0IHZhciBfX3Rlc3RfXyA9IHtcbiAgU01BTExFU1RfTlVDTElERV9CVUlMRF9OVU1CRVIsXG59O1xuIl19
