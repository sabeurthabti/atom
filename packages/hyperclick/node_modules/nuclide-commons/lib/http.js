
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var fs = require('fs');
var http = require('http');
var https = require('https');

// Although rfc forbids the usage of white space in content type
// (http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.7), it's still
// a common practice to use that so we need to deal with it in regex.
var contentTypeRe = /\s*\w+\/\w+\s*;\s*charset\s*=\s*([^\s]+)\s*/;

function getProtocolModule(url) {
  var _require$parse = require('url').parse(url);

  var protocol = _require$parse.protocol;

  if (protocol === 'http:') {
    return http;
  } else if (protocol === 'https:') {
    return https;
  } else {
    throw Error('Protocol ' + protocol + ' not supported');
  }
}

function getResponseBodyCharset(response) {
  var contentType = response.headers['content-type'];
  if (!contentType) {
    return null;
  }
  var match = contentTypeRe.exec(contentType);
  return match ? match[1] : null;
}

module.exports = {

  /**
   * Send Http(s) GET request to given url and return the body as string.
   */
  get: function get(url) {
    return new Promise(function (resolve, reject) {
      var body = '';
      getProtocolModule(url).get(url, function (response) {
        if (response.statusCode < 200 || response.statusCode >= 300) {
          reject('Bad status ' + response.statusCode);
        } else {
          var charset = getResponseBodyCharset(response);
          if (charset) {
            response.setEncoding(charset);
          }
          response.on('data', function (data) {
            return body += data;
          });
          response.on('end', function () {
            return resolve(body);
          });
        }
      }).on('error', reject);
    });
  },

  /**
   * Send Http(s) GET request to given url and save the body to dest file.
   */
  download: function download(url, dest) {
    return new Promise(function (resolve, reject) {
      var file = fs.createWriteStream(dest);
      getProtocolModule(url).get(url, function (response) {
        if (response.statusCode < 200 || response.statusCode >= 300) {
          reject('Bad status ' + response.statusCode);
        } else {
          response.on('error', reject);
          response.pipe(file);
          file.on('error', reject);
          file.on('finish', function () {
            return file.close(resolve);
          });
        }
      }).on('error', reject);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy93MS9fMm1jNm0wNTBxbjIzMm5wc2Y5ejNoZnNoNThfamgvVC90bXBpMzV6akdwdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWNvbW1vbnMvbGliL2h0dHAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7Ozs7Ozs7O0FBV1osSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3ZCLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQixJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7Ozs7O0FBSzdCLElBQUksYUFBYSxHQUFHLDZDQUE2QyxDQUFDOztBQUVsRSxTQUFTLGlCQUFpQixDQUFDLEdBQVcsRUFBTzt1QkFDMUIsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7O01BQXJDLFFBQVEsa0JBQVIsUUFBUTs7QUFDYixNQUFJLFFBQVEsS0FBSyxPQUFPLEVBQUU7QUFDeEIsV0FBTyxJQUFJLENBQUM7R0FDYixNQUFNLElBQUksUUFBUSxLQUFLLFFBQVEsRUFBRTtBQUNoQyxXQUFPLEtBQUssQ0FBQztHQUNkLE1BQU07QUFDTCxVQUFNLEtBQUssZUFBYSxRQUFRLG9CQUFpQixDQUFDO0dBQ25EO0NBQ0Y7O0FBRUQsU0FBUyxzQkFBc0IsQ0FBQyxRQUFhLEVBQVc7QUFDdEQsTUFBSSxXQUFXLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNuRCxNQUFJLENBQUMsV0FBVyxFQUFFO0FBQ2hCLFdBQU8sSUFBSSxDQUFDO0dBQ2I7QUFDRCxNQUFJLEtBQUssR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzVDLFNBQU8sS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7Q0FDaEM7O0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRzs7Ozs7QUFLZixLQUFHLEVBQUEsYUFBQyxHQUFXLEVBQW1CO0FBQ2hDLFdBQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTSxFQUFLO0FBQ3RDLFVBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUNkLHVCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsVUFBQyxRQUFRLEVBQUs7QUFDNUMsWUFBSSxRQUFRLENBQUMsVUFBVSxHQUFHLEdBQUcsSUFBSSxRQUFRLENBQUMsVUFBVSxJQUFJLEdBQUcsRUFBRTtBQUMzRCxnQkFBTSxpQkFBZSxRQUFRLENBQUMsVUFBVSxDQUFHLENBQUM7U0FDN0MsTUFBTTtBQUNMLGNBQUksT0FBTyxHQUFHLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQy9DLGNBQUksT0FBTyxFQUFFO0FBQ1gsb0JBQVEsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7V0FDL0I7QUFDRCxrQkFBUSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsVUFBQSxJQUFJO21CQUFJLElBQUksSUFBSSxJQUFJO1dBQUEsQ0FBQyxDQUFDO0FBQzFDLGtCQUFRLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRTttQkFBTSxPQUFPLENBQUMsSUFBSSxDQUFDO1dBQUEsQ0FBQyxDQUFDO1NBQ3pDO09BQ0YsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDeEIsQ0FBQyxDQUFDO0dBQ0o7Ozs7O0FBS0QsVUFBUSxFQUFBLGtCQUFDLEdBQVcsRUFBRSxJQUFZLEVBQWlCO0FBQ2pELFdBQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTSxFQUFLO0FBQ3RDLFVBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN0Qyx1QkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFVBQUMsUUFBUSxFQUFLO0FBQzVDLFlBQUksUUFBUSxDQUFDLFVBQVUsR0FBRyxHQUFHLElBQUksUUFBUSxDQUFDLFVBQVUsSUFBSSxHQUFHLEVBQUU7QUFDM0QsZ0JBQU0saUJBQWUsUUFBUSxDQUFDLFVBQVUsQ0FBRyxDQUFDO1NBQzdDLE1BQU07QUFDTCxrQkFBUSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDN0Isa0JBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDcEIsY0FBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDekIsY0FBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUU7bUJBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7V0FBQSxDQUFDLENBQUM7U0FDOUM7T0FDRixDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztLQUN4QixDQUFDLENBQUM7R0FDSjtDQUNGLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3cxL18ybWM2bTA1MHFuMjMybnBzZjl6M2hmc2g1OF9qaC9UL3RtcGkzNXpqR3B1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtY29tbW9ucy9saWIvaHR0cC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKTtcbnZhciBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyk7XG5cbi8vIEFsdGhvdWdoIHJmYyBmb3JiaWRzIHRoZSB1c2FnZSBvZiB3aGl0ZSBzcGFjZSBpbiBjb250ZW50IHR5cGVcbi8vIChodHRwOi8vd3d3LnczLm9yZy9Qcm90b2NvbHMvcmZjMjYxNi9yZmMyNjE2LXNlYzMuaHRtbCNzZWMzLjcpLCBpdCdzIHN0aWxsXG4vLyBhIGNvbW1vbiBwcmFjdGljZSB0byB1c2UgdGhhdCBzbyB3ZSBuZWVkIHRvIGRlYWwgd2l0aCBpdCBpbiByZWdleC5cbnZhciBjb250ZW50VHlwZVJlID0gL1xccypcXHcrXFwvXFx3K1xccyo7XFxzKmNoYXJzZXRcXHMqPVxccyooW15cXHNdKylcXHMqLztcblxuZnVuY3Rpb24gZ2V0UHJvdG9jb2xNb2R1bGUodXJsOiBzdHJpbmcpOiBhbnkge1xuICB2YXIge3Byb3RvY29sfSA9IHJlcXVpcmUoJ3VybCcpLnBhcnNlKHVybCk7XG4gIGlmIChwcm90b2NvbCA9PT0gJ2h0dHA6Jykge1xuICAgIHJldHVybiBodHRwO1xuICB9IGVsc2UgaWYgKHByb3RvY29sID09PSAnaHR0cHM6Jykge1xuICAgIHJldHVybiBodHRwcztcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBFcnJvcihgUHJvdG9jb2wgJHtwcm90b2NvbH0gbm90IHN1cHBvcnRlZGApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFJlc3BvbnNlQm9keUNoYXJzZXQocmVzcG9uc2U6IGFueSk6ID9zdHJpbmcge1xuICB2YXIgY29udGVudFR5cGUgPSByZXNwb25zZS5oZWFkZXJzWydjb250ZW50LXR5cGUnXTtcbiAgaWYgKCFjb250ZW50VHlwZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBtYXRjaCA9IGNvbnRlbnRUeXBlUmUuZXhlYyhjb250ZW50VHlwZSk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgLyoqXG4gICAqIFNlbmQgSHR0cChzKSBHRVQgcmVxdWVzdCB0byBnaXZlbiB1cmwgYW5kIHJldHVybiB0aGUgYm9keSBhcyBzdHJpbmcuXG4gICAqL1xuICBnZXQodXJsOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB2YXIgYm9keSA9ICcnO1xuICAgICAgZ2V0UHJvdG9jb2xNb2R1bGUodXJsKS5nZXQodXJsLCAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPCAyMDAgfHwgcmVzcG9uc2Uuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgICByZWplY3QoYEJhZCBzdGF0dXMgJHtyZXNwb25zZS5zdGF0dXNDb2RlfWApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBjaGFyc2V0ID0gZ2V0UmVzcG9uc2VCb2R5Q2hhcnNldChyZXNwb25zZSk7XG4gICAgICAgICAgaWYgKGNoYXJzZXQpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlLnNldEVuY29kaW5nKGNoYXJzZXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXNwb25zZS5vbignZGF0YScsIGRhdGEgPT4gYm9keSArPSBkYXRhKTtcbiAgICAgICAgICByZXNwb25zZS5vbignZW5kJywgKCkgPT4gcmVzb2x2ZShib2R5KSk7XG4gICAgICAgIH1cbiAgICAgIH0pLm9uKCdlcnJvcicsIHJlamVjdCk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNlbmQgSHR0cChzKSBHRVQgcmVxdWVzdCB0byBnaXZlbiB1cmwgYW5kIHNhdmUgdGhlIGJvZHkgdG8gZGVzdCBmaWxlLlxuICAgKi9cbiAgZG93bmxvYWQodXJsOiBzdHJpbmcsIGRlc3Q6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB2YXIgZmlsZSA9IGZzLmNyZWF0ZVdyaXRlU3RyZWFtKGRlc3QpO1xuICAgICAgZ2V0UHJvdG9jb2xNb2R1bGUodXJsKS5nZXQodXJsLCAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPCAyMDAgfHwgcmVzcG9uc2Uuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgICByZWplY3QoYEJhZCBzdGF0dXMgJHtyZXNwb25zZS5zdGF0dXNDb2RlfWApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3BvbnNlLm9uKCdlcnJvcicsIHJlamVjdCk7XG4gICAgICAgICAgcmVzcG9uc2UucGlwZShmaWxlKTtcbiAgICAgICAgICBmaWxlLm9uKCdlcnJvcicsIHJlamVjdCk7XG4gICAgICAgICAgZmlsZS5vbignZmluaXNoJywgKCkgPT4gZmlsZS5jbG9zZShyZXNvbHZlKSk7XG4gICAgICAgIH1cbiAgICAgIH0pLm9uKCdlcnJvcicsIHJlamVjdCk7XG4gICAgfSk7XG4gIH0sXG59O1xuIl19
